# -*- coding: utf-8 -*-
"""Midterm Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hULq-EI07xYf12ggNIbvNqgy7Cn0tosp

**A.) Data Set:** The dataset was collected in 1978. This dataset contains information about housing in the Boston area and includes 506 observations on 14 features. The target variable is the median value of owner-occupied homes in thousands of dollars (denoted "MEDV" in the dataset). The other features include things like crime rate, average number of rooms per dwelling, and proportion of non-retail business acres per town.
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.datasets import load_boston
from sklearn.decomposition import PCA
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data'
column_names = ['crime', 'res_zone', 'non-retail', 'river', 'nox', 'rooms', 'age',
                'dist_employ', 'acc_radial', 'prop_tax', 'pupil-teacher', 'prop_black',
                'low_status', 'med_value']
boston_df = pd.read_csv(url, sep='\s+', header=None, names=column_names)

boston_df.head()

"""**B.) Business Question:** What is the relationship between the median value of owner-occupied homes and the crime rate in the Boston area, and can this relationship be used to develop a predictive model to estimate home values based on crime rates?"

*This question could be of interest to real estate companies, property investors, and other stakeholders who are interested in understanding the factors that affect housing prices and developing a model to predict home values based on relevant features. By analyzing the Boston Housing dataset and exploring the relationship between the median home value and crime rate, stakeholders may be able to identify patterns or trends that can inform pricing strategies or investment decisions. They could also build a predictive model that uses crime rate and other relevant features to estimate home values with greater accuracy.*

**C.) Intoduction:** The Boston Housing dataset is a valuable resource for anyone interested in understanding the factors that affect housing prices and developing predictive models for estimating home values.

**C.) Visualizations:**

**Scatter Plot of Median Home Value vs. Crime Rate**: This visualization can show the relationship between the two variables and can help identify any patterns or trends.
"""

sns.scatterplot(x='crime', y='med_value', data=boston_df)
plt.title('Median Home Value vs. Crime Rate')
plt.xlabel('Crime Rate')
plt.ylabel('Median Home Value')
plt.show()

"""**Conclusions**: There is a negative correlation between crime rate and median home value: As we can see from the scatter plot, there is a clear negative trend in the data, with lower median home values associated with higher crime rates. This suggests that crime rate is an important factor in determining home values in the Boston area. There are some outliers in the data: While there is a clear negative trend in the data, there are also some points that do not fit this trend. For example, there are a few homes with very high median values even though they are located in areas with relatively high crime rates. These outliers may be worth investigating further to determine what factors may be contributing to their high values. The data is not evenly distributed: We can see from the scatter plot that there are more data points with low to medium crime rates and median home values, and fewer data points with high crime rates and low median home values. This suggests that there may be other factors besides crime rate that are contributing to the distribution of home values in the Boston area. Overall, this scatter plot provides a useful starting point for understanding the relationship between crime rate and median home value in the Boston area. Further analysis and modeling may be needed to fully understand the factors that determine home values in this region.

**Heatmap of Correlation Between Variables**: This visualization can show the strength and direction of the correlation between median home value and crime rate, as well as other variables in the dataset.
"""

corr = boston_df.corr()
plt.figure(figsize=(12, 10))
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title('Correlation Between Variables')
plt.show()

"""**Conclusions**: 


*   There is a weak negative correlation between median home value and the per capita crime rate by town (crime): As we can see from the heatmap, these two variables have a weak negative correlation, with a correlation coefficient of -0.39. This suggests that there may be a relationship between crime rate and median home value, but it is not as strong as some of the other relationships in the dataset.


*  There is a strong negative correlation between median home value (med_value) and the percentage of the population that is lower status (low_status): As we can see from the heatmap, these two variables are highly negatively correlated, with a correlation coefficient of -0.74. This suggests that lower status may be an important factor in determining median home value in the Boston area.

*   There is a strong positive correlation between the average number of rooms per dwelling (rooms) and median home value: As we can see from the heatmap, these two variables are highly positively correlated, with a correlation coefficient of 0.7. This suggests that the size and quality of homes is an important factor in determining their value in the Boston area.



*   There are moderate positive correlations between median home value and the proportion of residential land zoned for lots over 25,000 sq.ft. (res_zone), as well as the pupil-teacher ratio by town (pupil-teacher): As we can see from the heatmap, these two variables have moderate positive correlations with median home value, with correlation coefficients of 0.36 and 0.51, respectively. This suggests that zoning regulations and school quality may be important factors in determining home values in the Boston area.

**Box Plot of Median Home Value Grouped by Crime Rate**: This visualization can show the distribution of median home values across different crime rate categories, and can help identify any outliers or differences in the distribution.
"""

sns.boxplot(x='crime', y='med_value', data=boston_df)
plt.title('Median Home Value by Crime Rate Group')
plt.xlabel('Crime Rate Group')
plt.ylabel('Median Home Value')
plt.show()

"""**Conclusions**: As we can see from the box plot, the median home value tends to decrease as crime rate increases. This suggests that crime rate is an important factor in determining home values in the Boston area. There are a few homes with very high median values even though they are located in areas with relatively high crime rates. These outliers may be worth investigating further to determine what factors may be contributing to their high values. However, The distribution of home values is not symmetrical: We can see from the box plot that the distribution of home values within each crime rate group is skewed, with a longer tail on the higher value side. This suggests that there may be other factors besides crime rate that are contributing to the distribution of home values in the Boston area.

**Histogram of Crime Rate**: This visualization can show the distribution of crime rates in the Boston area and can help identify any patterns or trends.
"""

plt.hist(boston_df['crime'], bins=20)
plt.title('Distribution of Crime Rate')
plt.xlabel('Crime Rate')
plt.ylabel('Frequency')
plt.show()

"""**Conclusions**: The distribution of crime rates is skewed: As we can see from the histogram, the distribution of crime rates is skewed to the right, with a long tail on the higher crime rate side. This suggests that there are relatively few areas with very high crime rates in the Boston area, but they can have a significant impact on the overall distribution.
The majority of areas have low to moderate crime rates: We can see from the histogram that the majority of areas in the Boston region have crime rates of less than 10 per capita. This suggests that crime is not a major problem in most areas, but it may be a concern in some higher crime rate areas. The distribution of crime rates is not symmetrical: We can see from the histogram that the distribution of crime rates is skewed, with a long tail on the higher rate side. This suggests that there may be other factors besides crime rate that are contributing to the distribution of home values in the Boston area.

**Scatter plot of Median Home Value vs. Average Number of Roms:**: This visualization can show the relationship between the two variables and can help identify any patterns or trends.
"""

plt.scatter(boston_df['rooms'], boston_df['med_value'])

plt.title('Median Home Value vs. Average Number of Rooms')
plt.xlabel('Average Number of Rooms')
plt.ylabel('Median Home Value')

plt.show()

"""**Conclusions**: There is a strong positive relationship between median home value and the average number of rooms per dwelling: As we can see from the scatter plot, there is a clear trend of increasing median home value as the average number of rooms per dwelling increases. This suggests that the size and quality of homes is an important factor in determining their value in the Boston area.

**Table 1**: This table provides summary statistics for each variable in the dataset, grouped by the target variable (MEDV, i.e., median home value). We use the groupby() method to group the data by target value, and then use the describe() method to calculate summary statistics for each group. This shows summary statistics for each variable grouped by the target variable, which can help to identify any patterns or trends in the data.
"""

summary_by_target = boston_df.groupby('med_value').describe()
print(summary_by_target)

"""**Table 2**: This table provides the correlation coefficients between all pairs of variables in the dataset. We use the corr() method to calculate the correlation matrix. This shows the correlation between each pair of variables, which can help to identify any strong relationships or dependencies between variables.

"""

corr_matrix = boston_df.corr()
print(corr_matrix)

"""**Table 3**:  This table shows the median home value for each number of rooms in the dataset.  The median number of rooms tends to increase as the median home value increases. This suggests that larger homes tend to be more valuable in the Boston area."""

medv_by_rooms = boston_df.groupby('med_value')['rooms'].median().reset_index()
print(medv_by_rooms.head())

"""**Table 4**: There is a positive relationship between the number of rooms and median home value, holding age constant: As we can see from the table, within each age group, homes with more rooms have higher median home values. This suggests that the size of the home is an important factor in determining home values, independent of age."""

medv_by_age_and_rooms = boston_df.groupby(['age', pd.cut(boston_df['rooms'], 5)])['med_value'].median().reset_index()
print(medv_by_age_and_rooms.head())

"""**Table 5**: The table we created by grouping the Boston Housing dataset by the zoning (ZN) and whether the property bounds the Charles River (CHAS) and calculating the median home value for each group. Homes that bound the Charles River tend to have higher median values.As we can see from the table, homes that bound the Charles River have a higher median value than those that do not."""

medv_by_location = boston_df.groupby(['res_zone', 'river'])['med_value'].median().reset_index()
print(medv_by_location.head())

"""**PCA + Linear Regression**"""

import pandas as pd
import numpy as np
from sklearn.decomposition import PCA
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split


url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data'
column_names = ['crime', 'res_zone', 'non-retail', 'river', 'nox', 'rooms', 'age',
                'dist_employ', 'acc_radial', 'prop_tax', 'pupil-teacher', 'prop_black',
                'low_status', 'med_value']
boston_df = pd.read_csv(url, sep='\s+', header=None, names=column_names)


X = boston_df.drop('med_value', axis=1)
y = boston_df['med_value']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


pca = PCA(n_components=2)
X_train_pca = pca.fit_transform(X_train)
X_test_pca = pca.transform(X_test)


linreg = LinearRegression()
linreg.fit(X_train_pca, y_train)


y_pred = linreg.predict(X_test_pca)

mse = ((y_test - y_pred) ** 2).mean()
print('Mean squared error:', mse)

"""**Conclusions**: Overall, an MSE of 55.017 is not terrible but also not great. It suggests that the linear regression model using PCA-transformed features is able to explain some but not all of the variance in the target variable.

**Linear Regression + Forward**
"""

import pandas as pd
import numpy as np
from sklearn.feature_selection import SelectKBest, f_regression
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data'
column_names = ['crime', 'res_zone', 'non-retail', 'river', 'nox', 'rooms', 'age',
                'dist_employ', 'acc_radial', 'prop_tax', 'pupil-teacher', 'prop_black',
                'low_status', 'med_value']
boston_df = pd.read_csv(url, sep='\s+', header=None, names=column_names)


X = boston_df.drop('med_value', axis=1)
y = boston_df['med_value']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


n_features = X_train.shape[1]
selected_features = []
for i in range(n_features):
    best_score = 0
    best_feature = ''
    for feature in X_train.columns:
        if feature not in selected_features:
            temp_features = selected_features + [feature]
            selector = SelectKBest(f_regression, k=len(temp_features))
            selector.fit(X_train[temp_features], y_train)
            linreg = LinearRegression()
            linreg.fit(selector.transform(X_train[temp_features]), y_train)
            score = linreg.score(selector.transform(X_test[temp_features]), y_test)
            if score > best_score:
                best_score = score
                best_feature = feature
    selected_features.append(best_feature)
    print('Step', i+1, '- Selected feature:', best_feature, '- R^2 score:', best_score)


selector = SelectKBest(f_regression, k=len(selected_features))
selector.fit(X_train[selected_features], y_train)
linreg = LinearRegression()
linreg.fit(selector.transform(X_train[selected_features]), y_train)


y_pred = linreg.predict(selector.transform(X_test[selected_features]))


mse = ((y_test - y_pred) ** 2).mean()
print('Mean squared error:', mse)

"""**Conclusions**: The final mean squared error (MSE) of the linear regression model on the testing data is 24.291, which is relatively low compared to the range of the target variable (0 to 50). This suggests that the model is able to make reasonably accurate predictions of median home value based on the selected features. The order in which the features were added suggests that 'low_status' has the strongest correlation with the target variable, followed by 'pupil-teacher', 'acc_radial', and 'prop_tax'.

**Linear regression + Lasso**
"""

import pandas as pd
from sklearn.linear_model import Lasso, LassoCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error


url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data'
column_names = ['crime', 'res_zone', 'non-retail', 'river', 'nox', 'rooms', 'age',
                'dist_employ', 'acc_radial', 'prop_tax', 'pupil-teacher', 'prop_black',
                'low_status', 'med_value']
boston_df = pd.read_csv(url, sep='\s+', header=None, names=column_names)

X = boston_df.drop('med_value', axis=1)
y = boston_df['med_value']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


lasso = LassoCV(cv=5)
lasso.fit(X_train, y_train)


selected_features = X.columns[lasso.coef_ != 0]
coefficients = lasso.coef_[lasso.coef_ != 0]
for feature, coef in zip(selected_features, coefficients):
    print(feature, coef)


y_pred = lasso.predict(X_test)


mse = mean_squared_error(y_test, y_pred)
print('Mean squared error:', mse)

"""**Conclusions**: It seems that rooms, dist_employ, and pupil-teacher have the highest magnitude of coefficients and are therefore the most important features for predicting the median home value.

On the other hand, the features res_zone, age, prop_tax, and prop_black have relatively small coefficients and might not be very useful for predicting the target variable.

The mean squared error (MSE) of the model on the testing data is 24.15, which indicates that the model has moderate prediction accuracy. 
"""